{"Description":"Lifecycle Script Stack","Parameters":{"ResourceNamePrefix":{"Type":"String","Default":"sagemaker-hyperpod-eks","Description":"Prefix to be used for all resources created by this template."},"S3BucketName":{"Type":"String","Default":"sagemaker-hyperpod-eks-bucket","Description":"The name of the S3 bucket used to store the cluster lifecycle scripts."},"GithubRawUrl":{"Type":"String","Default":"https://raw.githubusercontent.com/aws-samples/awsome-distributed-training/refs/heads/main/1.architectures/7.sagemaker-hyperpod-eks/LifecycleScripts/base-config/on_create.sh","Description":"The raw GitHub URL for the lifecycle script."}},"Resources":{"S3CustomResourceRole":{"Type":"AWS::IAM::Role","Properties":{"AssumeRolePolicyDocument":{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"lambda.amazonaws.com"},"Action":"sts:AssumeRole"}]},"ManagedPolicyArns":["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"],"Policies":[{"PolicyDocument":{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Action":["s3:PutObject","s3:DeleteObject"],"Resource":{"Fn::Sub":["arn:aws:s3:::${S3BucketName}/*",{"S3BucketName":{"Ref":"S3BucketName"}}]}}]},"PolicyName":{"Fn::Sub":"${ResourceNamePrefix}-S3Access-${AWS::Region}"}}]}},"S3CustomResourceFunction":{"Type":"AWS::Lambda::Function","Properties":{"Code":{"ZipFile":"import boto3\nimport cfnresponse\nimport os\nfrom urllib import request\n\ndef lambda_handler(event, context):\n  try:\n    if event['RequestType'] in ['Create', 'Update']:\n\n      s3 = boto3.client('s3')\n      bucket = os.environ['BUCKET_NAME']\n      github_raw_url = os.environ['GITHUB_RAW_URL']\n\n      try: \n          # Fetch content from GitHub using urllib\n          with request.urlopen(github_raw_url) as response:\n            script_content = response.read().decode('utf-8')\n          \n            # Upload the script to S3\n            s3.put_object(\n                Bucket=bucket,\n                Key='on_create.sh',\n                Body=script_content,\n                ContentType='text/x-sh'\n            )\n        \n      except s3.exceptions.NoSuchBucket:\n        # If bucket doesn't exist, return fail\n        cfnresponse.send(event, context, cfnresponse.FAILED, {\n          'Message': 'Bucket does not exist'\n        })\n      \n      cfnresponse.send(event, context, cfnresponse.SUCCESS, {\n        'Message': 'File uploaded successfully'\n      })\n    elif event['RequestType'] == 'Delete':\n      s3 = boto3.client('s3')\n      bucket = os.environ['BUCKET_NAME']\n      try: \n        # Delete the file from S3\n        s3.delete_object(\n          Bucket=bucket,\n          Key='on_create.sh'\n        )\n        cfnresponse.send(event, context, cfnresponse.SUCCESS, {\n          'Message': 'File deleted successfully'\n        })\n      except s3.exceptions.NoSuchKey:\n        # If file doesn't exist, still return success\n        cfnresponse.send(event, context, cfnresponse.SUCCESS, {\n          'Message': 'File does not exist'\n        })\n      except s3.exceptions.NoSuchBucket:\n        # If bucket is already deleted, still return success\n        cfnresponse.send(event, context, cfnresponse.SUCCESS, {\n          'Message': 'Bucket does not exist'\n        })\n  except Exception as e:\n    print(e)\n    cfnresponse.send(event, context, cfnresponse.FAILED, {\n      'Error': str(e)\n    })"},"Environment":{"Variables":{"BUCKET_NAME":{"Ref":"S3BucketName"},"GITHUB_RAW_URL":{"Ref":"GithubRawUrl"}}},"FunctionName":{"Fn::Sub":["${ResourceNamePrefix}-lifecycle-script-loader",{"ResourceNamePrefix":{"Ref":"ResourceNamePrefix"}}]},"Handler":"index.lambda_handler","Role":{"Fn::GetAtt":["S3CustomResourceRole","Arn"]},"Runtime":"python3.12","Timeout":600}},"S3CustomResource":{"Type":"AWS::CloudFormation::CustomResource","Properties":{"ServiceToken":{"Fn::GetAtt":["S3CustomResourceFunction","Arn"]}}}}}